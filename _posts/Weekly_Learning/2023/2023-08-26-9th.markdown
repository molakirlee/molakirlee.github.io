---
layout:     post
title:      "2023-每周补脑9th"
subtitle:   ""
date:       2023-08-26 19:50:00
author:     "XiLock"
header-img: "img/in-post/2018/wl-bg.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 每周补脑
    - 2023


---

### 科学
1. [Matrices and graphs:The single most undervalued fact of linear algebra: matrices are graphs, and graphs are matrices.](https://thepalindrome.org/p/matrices-and-graphs)

### 言论
1. 如果想长期吸收学到的东西，你必须参与其中，亲自动手实践。但是，在智能手机流行的社会，真正的参与变得比以前困难。人们已经习惯了被动浏览别人的作品，分享、点赞和转发替代了自己的参与。 -- [How to Learn Better in the Digital Age](https://giansegato.com/essays/edutainment-is-not-learning)
1. 事情几乎总是从某个人做一些当时看起来毫无用处的事情开始的。 -- 詹姆斯·伯克
1. 对于任何没有足够财富的人来说，从事科学理论研究事业是一种自私和不负责任的人生选择。博士后的津贴很低，能够申请的工作岗位很少，通常在长达五年的时间里几乎没有积蓄，积累财富是不可能的，拥有一个家庭也很困难，熬过这个阶段你就已经中年了。 -- [Hacker News](https://news.ycombinator.com/item?id=35778537)
1. 你需要养成的一个好习惯，就是强迫自己去做困难的事情。随着你做的事情越来越困难，你会逐渐建立起对自己能力的自信。 -- [Proof You Can Do Hard Things](https://blog.nateliason.com/p/proof-you-can-do-hard-things)
1. 如果你明确知道自己要构建什么，并且唯一需要做的就是执行，那么远程工作的效果会好得多。反过来，如果你不知道自己需要构建什么，尝试边做边发现，并且依赖于同事的快速反馈，那么面对面工作会好得多。但是，现实是大多数公司，尤其是大公司的员工，都属于第二类，所以不适合远程工作。 -- [Hacker News](https://news.ycombinator.com/item?id=36251536)
1. 生产力目标（productive）占用你所有的时间，把你的日程排满，追求尽可能多的产出。有效性目标（effective）正好相反，它不追求添加更多的任务，而且减少那些不该做的事情。如果有人称赞你，说你的生产力很高，或者公司以生产力作为考核指标。你可能需要小心，你有变成机器的风险。更好的称赞应该是，你的劳动很有效，很高效。37signals 就是一家这样的公司，他们的书宣传的就是这样的思想：不要当工作狂，追求更少的代价取得同样的效果。可以读读他们的书：《实干》（Getting Real，2006）《重来》（Rework，2010）《远程》（Remote，2013）《何必工作狂》（It Doesn't Have to Be Crazy at Work，2018）。 -- Frank

  
### 观点
###### [20 Things I’ve Learned in my 20 Years as a Software Engineer](https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer/)
1. 优秀的软件工程师不仅编写代码，还会考虑谁将使用它、为什么使用它、如何使用它。牢记用户需求才能创造良好的用户体验。
2. 水平再高的程序员，也会在自己擅长的领域犯错，如果遇到复杂的问题，就更是如此了。始终牢记，最好的代码是没有代码，或者不需要维护的代码。
3. 任何软件工程师的主要工作都是交付价值。软件只是达到目的的手段。
4. 警惕那些很长时间没有编写任何代码、却在设计系统的人。
5. Bjarne Stroustrup 有一句名言："只有两种计算机语言：人们抱怨的语言和没人使用的语言"。大型系统也是如此，每个系统最终都很糟糕。因此，不要太在意代码的优雅和完美，而要持续改进，创建一个可用的系统，让开发者喜欢在其中工作并可以提供价值。
6. 10倍程序员是一个愚蠢的神话。我只见过程序员将代码规模增加了10倍，最终结果是你必须修复10倍的bug。真正要做的不是找到神话中的10倍程序员，而是要避免出现0.1倍程序员。那些浪费时间、不寻求反馈、不测试代码、不考虑边缘情况等的程序员，必须保证让这样的人远离我们的团队。
7. 人们说他们想要创新，但实际上，他们想要通常的只是某种新颖性和业务成功。如果你的创新改变了人们做事的方式，大多数情况下会得到负面反馈。如果你相信你正在做的事情，并知道它真的会改善事情，那么就准备好迎接一场持久战吧。
8. 数据是系统中最重要的部分。数据可能会比你的代码寿命更长，保持数据的有序和清洁，避免脏数据，从长远来看，会得到很好的回报。
9. 一直存在的旧技术不是恐龙，而是鲨鱼。它们很好地解决了问题，所以一直活到了现在，没有被快速变化的技术浪潮淘汰。不要轻易押注新技术，只有在充分理由的情况下才替换正在发挥作用的旧技术。那些老式的技术工具不花哨，也不令人兴奋，但它们可以完成工作，不会给你带来很多个不眠之夜。
10. 很多软件工程师除非被问到，否则不会发表意见。不要因为有人没当面发表意见，而认为他们没什么要补充的。有时，会议上嗓门最高的人是我最不想听的人。
11. 如果将人们与他们的工作成果分开，他们就会不太关心他们的工作。软件工程师和所有人一样，需要有主人翁的感觉，从头到尾拥有整个流程，直接负责交付价值。让一群充满激情的人完全拥有设计、构建和交付软件的所有权，令人惊奇的事情就会发生。
12. 面试最好用于了解某人是谁，以及他们对特定专业领域的兴趣程度，对于试图弄清楚他们是否将成为一个优秀的团队成员，那是徒劳的。
13. 始终努力构建一个更小的系统。

有很多原因会推动你，去构建一个比原先设想的更大的系统，人类似乎有一种提供更多功能的欲望。你应该抵制这种欲望，在满足设计目标的前提下，始终努力构建一个更小的系统，这样你最终会得到一个比最初设计更好的系统。


### 荐书


### 杂谈
###### [Nike运动鞋:Fear, Courage, and Willingness](https://every.to/superorganizers/fear-courage-and-willingness)
上个世纪60年代初，22岁的菲利普·奈特（Phil Knight）刚刚从大学毕业。在大学里，他是校田径队的短跑运动员，对运动鞋很熟悉。离开学校后，他就开始做运动鞋生意，将便宜的日本运动鞋卖到美国。他发现一款​​名为 Tiger 的日本运动鞋，比美国市场上的任何运动鞋都更轻，可以让选手跑得更快。他决定专门进口这种鞋子。但是没多久，他收到一封信，顿时就让这门生意没法做了。对方声称是 Tiger 运动鞋的美国独家经销商，命令他立刻停止销售，否则就要去法庭告他。奈特当时还是一个很害羞和瘦弱的青年，无法接受这个消息。他回忆说："（它让）我陷入了深深的恐惧之中。每天晚上我都会和家人一起吃晚饭，把妈妈做的烤肉和蔬菜放在盘子里。然后我会和父亲坐在角落里，闷闷不乐地盯着电视。"他开始考虑转行，放弃运动鞋生意。但在此之前，他想再试一下。他给制造 Tiger 运动鞋的日本公司 Onitsuka 写了一封信，请求他们改变独家销售授权，允许他在美国销售这款鞋。他没有得到任何回音。几个月之后，他基本已经放弃了卖鞋。就这样过了一段日子，他还是不甘心。他后来回忆说："我很焦虑，对未来感到恐惧，但是不知何故，我产生了一个疯狂的想法，而且越来越坚定。我不想放弃。"他的疯狂想法就是，自己一个人飞到日本，去找 Onitsuka 公司，面对面说服公司高层，给予他在美国西海岸销售 Tiger 运动鞋的权利。结果，他真的做到了，对方同意让他销售了。他的运动鞋店就这样重新开张了，这就是 Nike 公司的由来。如果奈特面对挫折和对未来的恐惧，放弃销售运动鞋，没有去日本，Nike 公司也就根本不会存在。


![](/img/wc-tail.GIF)
