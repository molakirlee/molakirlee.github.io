---
layout:     post
title:      "2024-每周补脑1st"
subtitle:   ""
date:       2024-03-09 08:30:00
author:     "XiLock"
header-img: "img/in-post/2018/wl-bg.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 每周补脑
    - 2024


---

### 科学
1. 目前的 AI 只是大规模语言模型，本质上属于统计预测。如果有一天 AI 能够证明数学难题，就表明它具有推理分析能力，"奇点"大概也就来临了。一家美国公司最近设立了一个奖项，只要哪一个开源的 AI 模型，能够首先赢得国际数学奥林匹克金奖，就能获得1000万美元。

### 言论
1. 工厂里面的一些很重要的应用问题，实际上背后都是数学问题……万事万物，都是有数和形这两个方面的。数学，撇开了万事万物的其他的属性，只是从数量关系和空间形式的角度来研究世界……高科技本质上就是一种数学技术，也就是说，你这个技术里面，包含的数学的成分越高，那么你就越有资格成为高科技。-- [著名数学家、中科院院士李大潜](https://www.eeo.com.cn/2023/1227/621733.shtml)
1. 数学这门功课，是一个重理解和思考的一个学科，数学学得好不好，要看三条：第一条，要理解深入；第二条，要运作熟练；第三条，要表达清晰。这里所讲的运作，包括推理和计算。这三条当中，最重要的还是要理解，要理解得深入，只有理解得深入以后，才能够实现运算熟练和表达清晰，才可能真正了解数学的真面目，也才有可能在好奇心和求知欲的驱动之下，发展自己的创造性的思维和习惯，这一点我觉得是非常重要的。假设我们把数学学习，仅仅看成是刷题，哪怕刷了更多的题，但是我不知道为什么这样做，还是换汤不换药，是不可能理解数学的精髓的，是不可能走进数学、真正和数学融为一体的。-- [著名数学家、中科院院士李大潜](https://www.eeo.com.cn/2023/1227/621733.shtml)
1. 应该要把你这一阶段应该学的东西要学懂，不仅要学懂，你要学到得心应手一点、要学到透彻一点。那现在这一阶段的事情，不好好地做，做得粗枝大叶的，急急忙忙开始做下面一个阶段的事，把所学的知识搞得半生不透的，反而容易夹生饭了，所以我们还是要脚踏实地循序渐进。 -- [著名数学家、中科院院士李大潜](https://www.eeo.com.cn/2023/1227/621733.shtml)
1. 我们没有秘方。我们没有护城河。 -- [一份谷歌高级工程师的备忘录](https://finance.sina.com.cn/stock/usstock/c/2023-11-24/doc-imzvsncv7037099.shtml)
1. Most AI startups are doomed. Just because it matters doesn’t mean it’s defensible or profitable. -- [JAMES WANG](https://weightythoughts.com/p/most-ai-startups-are-doomed)
1. "知识错觉"（the illusion of knowledge）指的是，你自以为懂得或掌握了某种知识和技能，但是实际上并不懂。最近的一项研究表明，互联网可能会助长人们的"知识错觉"，过度自信自己的技能水平。程序员尤其要小心这种错觉，千万不要看完教材或文档，就认为自己掌握了某项技能，一定要自己动手用它做过项目，才算学会。
1. 每当你认为别人毁了你的生活时，实际上是你自己毁了你的生活。受害者心态是一种非常有害的心态。如果你换一种心态：无论情况多糟糕，这始终是你自己的问题，并且你尽力来解决它。我认为这更有效。 -- [Charlie Munger - Feeling Like a Victim is Perfectly Disastrous](https://historyinvestor.com/p/takeaway-tuesday-facing-adversity-charlie-munger)
1. 不要追随你的激情，追随你的努力。 -- [HOW TO FIND OUT WHAT YOU WANT TO DO CREATIVELY](https://mrsteinberg.com/how-to-find-out-what-you-want-to-do-creatively/)
1. 我拆解了大部分从中国买来的电子产品，里面有很多工程创新，但这些创新并不是针对消费者的，而是针对如何以更少的成本制造这些电子产品。如果有一天，这些工程师转移注意力，关注如何让这些产品有更好的性能、更多的功能，消费者就会感知到他们的创新。 -- [Hacker News](https://news.ycombinator.com/item?id=37919124)
1. 不要把职业（career）当成某一件具体的事情，这是人类发明的最危险、最令人窒息的概念之一，也是大多数梦想和直觉的敌人。职业应该是一个抽象的概念，指的是一个人在日常的工作和生活中，不断探索、培训、实践、逐步进步的过程。 -- [Steve Jobs’ Legacy for Builders](https://every.to/napkin-math/steve-jobs-legacy-for-builders)
1. 如果不了解系统的工作原理，就无法在系统之上构建东西。 -- [Lessons I’ve learned from software engineering are uniformly cynical](https://ahelwer.ca/post/2018-02-13-z3-firewall/)
1. 慢就是顺利，顺利就是快。 -- [Lessons Learned from Working Remotely](https://dtransposed.github.io/blog/2023/11/02/Remote-SWE/)
1. 直到有一天，你意识到了你会死，手头的事情做不完，一切就都发生了改变。从那一天开始，你花费的时间才是真正花出去的时间。 -- [Martin Scorsese: “I Have To Find Out Who The Hell I Am.”](https://www.gq.com/story/martin-scorsese-profile)
1. 亚马逊开会时，不准使用 PPT，发言人必须提交一份六页的备忘录。 -- 贝佐斯
1. 你原以为，精通某项运动需要多年的训练、仔细的思考、知识的积累，但是有一天，你突然发现，只要使用软件，无需任何思考和知识就能实现这个目标。这让你过去生涯中很多的付出，看起来都是浪费时间。 -- [A Coder Considers the Waning Days of the Craft](https://www.newyorker.com/magazine/2023/11/20/a-coder-considers-the-waning-days-of-the-craft)
1. 软件需要有人通盘理解它的运作机制，所以单个工程师有可能比一个职业开发团队造出更好的产品。因为单个工程师花时间，完整理解了他要构建的软件，而职业开发团队总是从一个项目转移到另一个项目。这也是为什么接手不熟悉的项目，比重建该项目要困难得多，以及为什么软件外包的质量总是如此糟糕。 -- [Suddenly, I Understand Software](https://johnwhiles.com/posts/programming-as-theory)
1. 未来的内容生产，就是两种趋势的斗争。一种是 GPT 工具快速、廉价地生产出大量的文章，造成巨大的内容污染。另一种是更多的人可以借助 GPT，更容易地创作更多优质的内容，内容行业的进入门槛会降低，对周围一切的理解将会更加深入。 -- [How AI will change your team's knowledge, forever](https://slite.com/blog/gpt-knowledge-revolution-is-coming)
1. 有一个名词叫做"报复性熬夜"，指的是有些人明明在白天疲劳不堪，晚上却不愿意早睡，宁愿在床上玩手机。这是因为他们控制不了自己的生活，通过在晚上推迟睡觉，获得一点自己掌控时间的自由感。 -- [Revenge Bedtime Procrastination](https://solvingprocrastination.com/revenge-bedtime-procrastination/)
1. 所谓"单线结构"（也称"线性结构"），指的是一篇文章只说一件事，按照线性顺序进行叙述，由浅入深、循序渐进、平铺直叙、层层递进。只要采用了单线结构，技术文章就不会太差。即使内容是难懂的，至少结构是清晰的，一环扣一环，读者能知道自己卡在哪一环上。只要克服了这个难点，就能继续往前走，不会有陷入迷宫、找不到方向、如坠五里雾中。你要把混乱而跳跃的思维，整理成单线结构，表达出来，让他人理解，谈何容易，通常都需要反复推敲和提炼。 -- Frank
1. 1931年，奥地利逻辑学家库尔特·哥德尔提出了重要的"哥德尔不完备定理"。他证明，任何一组数学公理都不可能是完备的，总有一些事实无法用这些公理来证明；同时，他还证明，没有一组公理具有一致性（即永远不会导致矛盾）。这意味着，任何一个理论体系总有一些无法证明的命题，或者说，你能证明什么，取决于你的起始假设，而这些假设是不能证明的。 -- [How Gödel’s Proof Works](https://www.quantamagazine.org/how-godels-proof-works-20200714/)
1. 中国客户喜欢自己搞"in-house"实现，不喜欢购买外部服务，更不喜欢订阅。而且，买的时候希望一个产品提供 N 个本应由不同工具链完成的功能。 -- [创业7年复盘，中美企业服务市场差异浅析](https://mp.weixin.qq.com/s/2EiYgxCC9q6lCIz9V0ZhbA)
1. 没错，人类艺术家可以创造出伟大的作品，AI 不行。但问题是，市场并不需要伟大的作品，只需要一些可以用的作品，用于游戏、影视剧等等。 -- [Hacker News](https://news.ycombinator.com/item?id=34544888)
1. 你可以逃避现实，但你无法逃避"逃避现实"的后果。（You can avoid reality, but you cannot avoid the consequences of avoiding reality.） -- [Ayn Rand](https://newideal.aynrand.org/the-quotable-ayn-rand-you-can-avoid-reality-but/)
1. 康威定律的最好表述是："任何系统的构成，都反映了设计这个系统的组织结构。"为了适应康威定律，现在有一种策略，就是一旦定下软件架构，就相应改变组织结构，让紧密耦合模块的开发者更容易沟通。 -- Frank
1. 互联网购物已经娱乐化了。人们购物不完全是出于生活需要，而是忍不住想做点什么，为了消磨时间。 -- [Fast Fashion Casino](https://dirt.fyi/article/2023/11/fast-fashion-casino)
1. 你的代码一旦进入生产环境，就像背上一笔债务，将来需要不断支付利息，除非代码不再使用。第一个原因是，由于各种限制，代码的实现有问题，包含了 Bug，或者选择了有问题的组件，后期需要修改或重写。第二个原因是，即使代码是完美的，但由于技术进步，它会逐渐腐化过时，后期需要不断维护和更新，这通常比原始开发成本更高。既然所有代码都是技术债，程序员写代码时，就必须考虑到它的长期成本，尽量减轻自己或别人日后的负担（利息）。一个基本的事实是 代码越少，技术债越小；没有代码，就没有技术债。从这个角度看，软件开发的正确做法是下面两点。（1）冗余的代码都要删除。（2）只实现那些必须实现的功能，除非绝对必要，不要引入新功能。新功能必然带来新的代码，而且新功能一旦添加，就很难废除，总是会保留下来。 -- Frank
1. 一切都是模糊的，直至你试图使其精确时，你才会发现，我们日常表达出来的精确与真正的精确相距甚远。以至于当我们说话时，你无法假设这就是对方真正的意思。 -- [Bertrand Russel](https://siddhesh.substack.com/p/projects)
1. 每一个最佳实践的背后都有一个恐怖的经历。 -- [Advice for new software devs who've read all those other advice essays](https://buttondown.email/hillelwayne/archive/advice-for-new-software-devs-whove-read-all-those/)
1. 一周是一年的2%。 -- [Nat Friedman](https://nat.org/)
1. [Reduce technical debt by valuing comments as much as code.](https://blogs.oracle.com/javamagazine/post/java-comments-reduce-technical-debt)
1. 李彦宏说：“以后不会存在‘程序员’这种职业了，只要会说话，人人都具备程序员的能力。未来的编程语言只会剩下两种，一种叫做英文，一种叫做中文。”但我觉得，以后都不会有中文和英文的区别。
1. 幸福的三大要素是：有要做的事（something to do）、有要爱的人（someone to love）、有寄予希望的东西（something to hope for）。 -- [亚历山大·查默斯](https://www.forbes.com/quotes/252/)

### 观点

###### 万华旧事
1993年，丁建生下定决心自主研发MDI技术。他与廖增太等10人的团队一起，苦苦摸索研究日本的设备，看它是如何运行的。在管道、阀门、温度传感器，以及投料比例之间，丁建生们苦苦探求。整整半年时间，他们反复拆装零部件，拆了装，装了拆。就这样，丁建生们对几十万个零部件了如指掌。

股民王枫在投资万华的三年间，获得了较好的收益。他曾一度忽略了化工行业周期性这一特点，直到万华2022年净利润同比下滑，王枫才深切理解这句话：谁也逃不过周期魔咒。即便是化工巨头万华也不例外。进入2023年，虽然因全球石油、天然气价格下调，万华化学原料成本得以下降，但由于化工行业下游需求处于恢复阶段，万华化学仍增收不增利：前三季度归属净利润同比减少6.65%，至127.03亿元。业绩表现不佳的情况下，万华的股价开始回调。在周期魔咒下，万华最大的优势，也变成最大的劣势。“聚氨酯板块对万华来说太重了。而恰恰万华的体制和规模，决定了其不会看重较小的市场和产品。”

在万华坐稳MDI全球第一后，万华就进入新的赛道石化行业（乙烯、氯乙烯、环氧乙烷等）和新材料（TPU 、SAP 、PC 、 PMMA）行业，意图形成完整的生产线。在万华的设想中，石化产业链是万华整个产业链的桥梁，它能支撑起聚氨酯和新材料、精细化学品生产，为其源源不断地提供廉价的原材料。这些年来，万华没闲着：包括聚氨酯事业部在内的七大事业部，都在积极开拓新产品。如2023年，万华一边布局聚砜、异丙醇胺、尼龙12弹性体、间苯二甲胺、特种异丁烯、POE等多项关键化工新材料项目，一边在电池电解液和电池回收领域加紧布局。但这长周期的布局很难在短期内见效。从目前来看，石化行业除了乙烯、聚乙烯，以及某些高性能新材料和高端专用化学品，尚有一定短缺外，国内其余主要石化产品，比如环氧丙烷、MTBE、丙烯酸及酯等，均已呈现出产能过剩的特征。

###### [The B Lane Swimmer](https://holly.witteman.ca/the-b-lane-swimmer/)
几年前，我参加了一个游泳训练营。所有人在一个泳池训练，按照水平分在四个泳道：A 道（游得最快的人）、B 道（次快）、C 道（次慢）和 D 道（最慢）。我从 D 道开始，接受了大量的指导。周围的人都对我很好，我慢慢进步，终于进入了 C 道。那组的人也热情欢迎我。但是，我注意到，旁边 B 道的人并不像 C 道那样友善。A 道选手都非常友善，慷慨给予鼓励、表扬和提示。我怀疑这是普遍现象：A 道、C 道和 D 道的人都很友善，大家几乎都乐于助人；B 道的人则是对 A 道和其他 B 道选手友善，但对 C 道和 D 道则不然。因为我后来发现，其他运动领域也是如此。那些仅次于顶级选手的运动员，往往对不如自己的选手很苛刻，害怕别人超过自己。学术界也有这种现象。真正伟大的研究者慷慨而热于助人，许多普通水平的研究者也是这样。然而，那些有一定知名度、但又没有做出顶尖成果的研究者，对不如自己的人就不友善了。当你是最好的 A 组时，很容易表现得宽宏大量，你确信自己会有成果，这让你安心无忧。当你处于平均水平或低于平均水平（C 组或 D 组）时，表现得友善也很容易。远离顶尖水平，意味着竞争压力不大，所需要付出的努力可能也不大，你会有一种"放轻松"的心态（反正我到不了顶峰，就当作玩呗）。那些仅次于优秀水平的人，感受到最大的竞争压力。你离顶峰如此之近，追赶却又艰难无比，放弃又不甘心。最令人沮丧的是，没有人记得第二名。同时，后面的人还可能超过你。所有这些因素，都可能导致一种不友善的态度。

###### [Google "We Have No Moat, And Neither Does OpenAI"](https://www.semianalysis.com/p/google-we-have-no-moat-and-neither)
AI行业有一些特点，导致这是一个完全竞争行业，"没有护城河"，想要获得领先优势和垄断利润，极其困难。
1. 生成式 AI 的核心技术是开源的，任何人都可以获取。某些公司可能有独家技术，但不是关键部分。AI 的架构和原理都是公开的，不同的只是各家的实现。网上有AI的开源模型，功能越来越强。只要按照教程操作，即使是家用电脑，也能很快架设一个可用的AI服务。
2. AI模型的替代性很强。各公司的模型有强有弱，但是核心功能都是类似的，很容易被替代。模型之间的差异，目前来看不是决定性的。一家公司推出的新功能，其他公司很快就能赶上。
3. AI的核心竞争力在于算力和训练语料。谁的算力更多，训练语料更丰富，谁的模型就表现更好。算力依赖于GPU和机房规模，训练语料需要自己收集。说到底，两者都取决于经济实力。另外，训练材料不存在版权问题，大家都能用。欧美的判例目前是，只要生成结果不构成复制，就没有侵权。也就是说，可以自由使用版权材料进行训练，只要不生成一模一样的结果。
4. AI的研究人员是流动的。AI科学家跳槽很常见。另外，大部分AI研究人员来自学术界，没有竞业问题，可以自由发表成果。综上所述，AI行业的各个方面都没有护城河，最后活下来的公司，一定是资源最多的公司。这就是为什么美国股市这一轮AI概念的上涨，主要涨的是那七家最大的IT公司的原因。雇佣更多AI工程师、收集更大的语料集、支付更多训练费用，才能成为行业赢家。但问题是，别人只要钱包够深，就有机会超过你。

###### [Human ChatGPTs and the vices of foggy thinking](https://www.geoffmulgan.com/post/human-chatgpts-and-the-vices-of-foggy-thinking)
大家都说 ChatGPT 像人，但是我觉得，还有另一方面，那就是有些人很像 ChatGPT，尤其是在学术界。ChatGPT 不理解任何材料，但可以利用这些材料，快速找到问题的合理答案。它会综合和模仿，有时表现得非常令人信服，就像某个知识渊博的人在谈论某个主题。学术界的很多人也是这样，他们很聪明，吸收了说话和构建理论的方法，并且善于听起来令人信服。但是，如果你问一个探索性的问题，就会发现他们的理解很少，一切侃侃而谈都是表面的，没有深度。这都是模仿而不是真正的思想，他们只是故意让别人觉得似乎有道理。许多领域的许多人，表现得就像 ChatGPT 的真人版，特别是在那些不做太多实证工作、不涉及对事实或假设进行检验的学科。他们制造的文本越多，就越危险。这种人有很多明显迹象，比如使用非常笼统的术语，以及听起来巧妙的表述或行话，内容里面很少有事实，例子也很少或者很随意，没有真实的感受，而且通常也不会足够清楚地说出他不同意什么。我现在意识到，我不理解某人在说什么，有时很可能是他们不知道自己在说什么，表现得像 ChatGPT。我将其称为"吹泡泡"，即没有实质内容但能让他人信服的说话能力。这是很多大学领导的重要技能。现在，ChatGPT 向我们展示了尽管不理解，但将大量材料合成为可信的文本流，是完全可以做到的。也许这是不可避免的，但真是一种非常不健康的恶习----人们应该走出去，观察事物，清晰说出自己的真实感受。我明确意识到，自己更愿意被那些行为不像机器人的人包围，更愿意倾听那些有原创思想的人的声音。

###### [乔布斯照片](https://profoto.com/int/profoto-stories/albert-watson-steve-jobs)
乔布斯并不太喜欢被人拍摄，这对摄影师是一种挑战。拍摄当日，摄影师被告知拍摄时间只有一小时，然而他却胸有成竹地说，只要三十分钟便能完成。艾伯特·沃森建议史蒂夫·乔布斯稍微前倾，说道："想象一下，桌子对面有四五个人不同意你的观点，但你知道自己是对的。"Steve Jobs 凝视着镜头，眼神十分坚定，给人一种充满信念与智慧的感觉。这就是这幅肖像照的创作过程。离开时，史蒂夫·乔布斯看了一眼照片，问他是否可以拥有它，并说这"也许是我拍过的最好的照片"。

### 有趣
1. [CHH第五届书房Show活动](https://www.chiphell.com/article-30687-1.html):Chiphell筛选的书桌
1. [Steve Jobs Archive](https://book.stevejobsarchive.com/?utm_source=thenewstack&utm_medium=website&utm_content=inline-mention&utm_campaign=platform)
1. [使用统计学方法计算youtube有多少视频How Big is YouTube?](https://ethanzuckerman.com/2023/12/22/how-big-is-youtube/)
1. 博士毕业以后，香农来到普林斯顿高等研究院，爱因斯坦也在那里。当时，香农只是一个小讲师，而爱因斯坦已经是名满世界的大科学家。有一次，香农正在研究院给一群数学家上课，教室的后门打开了，爱因斯坦走了进来。爱因斯坦站着听了几分钟课，然后与后排的一个听课者耳语一番，就离开了教室。课程结束后，香农匆匆忙忙地赶到教室后排，找到那个与爱因斯坦耳语的人，迫切想要知道这名伟大的科学家对他的讲课内容有哪些评价。那个人告诉他："爱因斯坦只是问了洗手间怎么走。"
1. [国内网友的2023总结](https://github.com/saveweb/review-2023)
1. [PAPER PIANO: 通过摄像头实现在白纸上弹钢琴](https://github.com/Mayuresh1611/Paper-Piano)
1. [蒙特卡洛模拟证明，去赌场不是一个好主意。](https://easylang.dev/apps/tutorial_mcarlo.html)

### 荐书


### 杂谈


![](/img/wc-tail.GIF)
