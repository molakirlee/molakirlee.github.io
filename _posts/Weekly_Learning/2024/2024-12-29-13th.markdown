---
layout:     post
title:      "2024-每周补脑13th"
subtitle:   ""
date:       2024-12-29 22:36:00
author:     "XiLock"
header-img: "img/in-post/2018/wl-bg.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 每周补脑
    - 2024


---

### 科学


### 言论
1. 曹操是个实用主义者，放走关羽和杀沮授，都是优先考虑现实问题，考虑对自己事业的正/负面影响。

### 观点
###### [梁振锐：编程十年的感悟](https://ramsayleung.github.io/zh/post/2024/%E7%BC%96%E7%A8%8B%E5%8D%81%E5%B9%B4%E7%9A%84%E6%84%9F%E6%82%9F/)
1. 我也从来不会把自己定义为某门语言的程序员，如Java程序员,C++程序员等等, 我只叫自己做Software Development Engineer. 语言从来只是工具，只要你持续学习，遇到新的场景，自然就会学习新的编程语言了.计算机的世界日新月异，可能几个月就会出个新框架，几年又会流行一门新语言，只有持续学习，才能持续保持自己的竞争力.
1. 在我看来，英语就是夜里走路时手上拿着的手电筒，可以让我们走自己的路的同时， 扫一下旁边那条道的情况，需要时及时转向，不至于一条路走到黑. 
1. 独立思考，开发过程免不了要做各种决策，比如技术选型，针对你的需求，你可能会找到一打「看似」符合要求的组件， 可能还会去网上找找对各个组件的评价，会发现众说纷纭，就需要自己独立对每个组件做出分析，找出其优劣，再结合自身团队的特点，做出决策.关于独立思考，我最喜欢的是一句话是HBO出品短剧《切尔诺贝利》里面， 科学家瓦列里·列加索夫希望克格勃释放调查真相同事乌拉娜·霍缪克的要求，说可以保证她是没问题的，克格勃头子回答的那句话:Trust, but verify.(相信，但要核实) 
1. make it run, make it fast, make it beautiful.最近在做副业的尝试，有个深刻的体会，技术可能是商业里面最不重要的。从零把产品做出来，推广给用户，用户只会关注你的产品是否好用，能否解决他们的问题.他们既不会关注你是用C++/Java还是Javascript 写的,也不会关注你代码写得是否优雅，与其执着于技术选型，不如先把产品干出来让用户试用。
1. 即使是出于乐趣，编程的目的还是利用计算机解决问题，而解决问题最好的工具就是你最熟悉的工具。除非你了解的工具不适用于你的问题，那么自然就需要一个新工具，也不要削足适履，矫枉过正。当然，如果是为了满足求知欲而想去学习一个新的语言，那选择你感兴趣的就可以了。
1. 当初学习编程的时候，曾经有个误区，认为自己只要把技术搞好，就可以不去关心什么「人情世故」。因此初入职场之后，我既是这么持有这样的想法，又是这样行动的，虽然不至于对其他人冷脸相对，但是难免会如好友形容那般：「孤傲」但是被毒打时间久了才会发现，无论是在国内或国外，都难免会有「人情世故」，用英文来说，那叫 network and connection.即使我技术能力过硬，也需要被人见到才行，和同事领导相处关系好，才可以在做出成绩的时候，「花花轿子被众人抬」。所以我现在都是有事没事都和同事们聊天，既可以提升下熟悉度，也可以了解到许多部门八卦， 还可以从同事们抱怨中找到潜在优化点，践行自己「Work hard and be nice to people」的理念.这行做久了，会发现软件工程其实说到底，就是人的系统工程。 
1. 手里拿着锤子的时候，把什么都当成钉子来砸。被毒打多才认清的事实就是，有很多事情是无法用代码来解决，代码只是个工具，只能在个合适的场景使用, 避免路径依赖.酒香也怕巷子深，只会写代码没啥用，还要写文章，在公司内部做分享，让别人能「看到你」。编程肝项目的专业能力固然重要，但是也要有营销自己的软实力，就像一位长者说的那样: 两手抓，两手都要硬.不知道是中国人讲究谦虚内敛的品质，还是程序员「木讷呆板」的刻板印象，导致大家都不怎么营销自己。有事没事和老板聊下天，增进下交流，经常露个脸，可能比肝十个项目还有用。 
1. 不仅能从他们身上学到非常到的优点，提升技术能力，可以学到最佳实践和工程经验，在Code Review 的时候可以学到更好的编程方式，遇到问题时又有靠谱的队友帮忙和指导。由优秀的程序员开发出来的系统的独特之处，知道什么叫简单好用的系统，形成自己的技术品味。品味与美感这个词是很抽象，但是用过了好用的系统，自然就不会对那些粗制滥造，还靠老板背书强行推广的系统感兴趣。而提高技术品味在提高我们的技术认知的前提下，又能反过来帮我们提高设计能力.和优秀的同事共事的另外一个好处是可以建立高质量的人脉网络，利于职业发展，跳槽换赛道也多个选择。虽然初始公司也有优秀的开发者，但是平均而言，大公司优秀程序员的比例会更高，毕竟他们更有竞争力的薪资福利，自然也有更高的招聘门槛。 
1. 无论是编程，还是其他的技能，我感觉都是「马太效应」，你学得越多，你懂得越多，再学新的东西，你就会学得越快。代码写多了才意识到，程序员的竞争力并不是写代码，也并不是哪门语言或者框架， 其核心竞争力是通过技术解决问题的能力，又何必再去拘泥于哪门具体的编程语言或技术呢。 -- 


###### [梁振锐：这些年走过的路：从广州到温哥华](https://ramsayleung.github.io/zh/post/2023/%E8%BF%99%E4%BA%9B%E5%B9%B4%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF_%E4%BB%8E%E5%B9%BF%E5%B7%9E%E5%88%B0%E6%B8%A9%E5%93%A5%E5%8D%8E/)
1. 我对自己的大学生涯有很高的要求，我上的学校可能并不如其他人，但是我大学要学会的东西并不能比其他人差。大一计算机导论的老师对我们说，国内很多教材编写得可能并没有那么好，最好还是看国外的经典教材。因此，我把教材大多换成了国外的教材，并通过配套的网课进行自学.在大二的时候，把计算机相关的课程，例如计算机网络，数据库，数据结构，算法，C语言与Java语言等都自学完了。
1. 颁奖典礼上邀请了加州州立大学的教授刘颖作程序开发经验分享，在分享过程中， 刘颖先生提了一些问题作为互动，大多问题我都举手作答。会后，刘颖教授与我交流，询问我是否有意愿去他在深圳的创业公司（6滴科技有限公司）实习，怀揣着忐忑的心情，我表达了同意。就这样，我在大二暑假，在无需面试的情况，我拿到了人生的第一份实习Offer。（Offer来得太容易，当时同学还担心我去深圳进传销窝了）
1. 因为有了在芝麻信用的翻车之鉴，我也格外珍惜这次的机会，所以花了很多心思和精力学习业务和参与开发。
1. 蚂蚁金服终面时，面试官（我的未来二级主管）甚至问到数据库怎么水平扩容，要怎么分库分表，事务如何保障等等。如果没有在UC 实习的这段经历，我可能真的没法办法回答得上，这些都不是看看面经就能回答上的问题。 我感觉也超出了校招对应届生的要求，就这样被「拷问」了接近一个半小时，远超出正常的面试时间。经过这三轮面试之后，我终于收到了第一份校招 Offer，兜兜转转，又拿到了蚂蚁金服的Offer 了。可谓「山穷水尽疑无路，柳暗花明又一村」.
1. 在客户域待了八个月后，有一天导师来和我们说，客户域的业务要移交给北京的团队；虽然知道阿里的文化有「拥抱变化」， 只是未曾想，变化来得如此之快。客户域的业务移交后，原团队的同事因为没有业务可干，分别被分流到其他团队。我来到了聚合收单团队；只能作为通道存在，不具有任何的门槛和粘性，商户可以随时切走。其兴也勃焉 其亡也忽焉。聚合收单巅峰时，曾代理微信支付10%的交易量； 但在微信支付发现这种代理行为，并进行打击之后，业务量急据萎缩，聚合收单团队又面临解散。在聚合收单待了10个月之后，我又无事可干了。这一次，我和老板详谈，希望可以到个稳定的团队，可以踏实地工作。而老板手下能满足我要求的就是另外一个团队：金融网络。金融网络维护的系统，庞大，灵活且复杂。很多功能，复杂到都没有人能说清它是怎么工作的，也没有文档或者资料，一切都靠口口相传。因为金融网络复杂又重要，被整个网商银行所依赖，就导致金融网络很容易出故障。在这样的环境里面，我又坚持了半年，感觉着实看不到什么前景和机会。频繁的业务变更，两年时间，经历了3个团队，兼之晋升和绩效的问题，导致我心生去意。
1. 996工作制只不过「劫贫济富」的缩影。996工作制对工程师职业生涯的影响非常不利，主要是：1)压缩了员工的业余时间，因此减少了员工的自学时间，你更加没有时间去自学，去提升自己的能力；如果能力得不到提升，你在人力市场中的「议价能力/谈判筹码」也就得不到提升；然后只能继续接受这种变态的工作时间，这是个恶性循环。身陷其中，并越来越无法自拔;2)消耗了员工的自控力，也就减少了自学的「动力」：如果你的工作不是你的兴趣所在，长时间加班之后，回到家里，你很难再有动力去学习其它新技能。3)对健康的负面影响;4)对家庭的负面影响
1. 如何走出996的怪圈呢？关键在于时间与坚持。每天挤出的时间不需要很多，哪怕半小时到一小时，足矣。这里的关键在于「坚持」。如果你能坚持每天挤出“半小时到一小时”用来自学，大约1到2年时间，就会有效果——你的能力就会有提升.提升自己的能力，是摆脱这个怪圈的第一步。每天晚上回去，花一个小时看书和学习；周末和近卫军的小伙伴韬然一起去学习半天到一天，然后另外一天去踢球。就这样，我每年大概看完了20本书，专业书看得比较慢，花了1年多的时间，学习了C++，算是入了门。英语是不能放下的，听，说，读，写；除了说的机会不大，读和写都尽量保持着，使用英文进行搜索，阅读英文文章；使用英语回复Github 和Stackoverflow 的问题。在2020年的时候，又开始自学日语。学好语言，机会总会多些的。
1. 外企基本不考察项目经历和计算机原理（即所谓的八股文），基本只看解算法题，而我当时在leetcode 上也就解决了不到200道题。面试官问了3道算法题，我只做出来了一题半，那半题是使用暴力解法解出来的，时间复杂度基本没法看。剩下的时间就和面试官相互沉默与尴尬，即使面试官给我提示，我也没有思路做出来。解题的确是需要训练的，这一面自然是面试失败了。当时可以说是相当沮丧。
1. 面试的时候说语言不限，现在又要求我使用C++ 和grpc 完成，说考察我的学习能力，还好我都学过。但我就没见过这种面试要求，可能微信支付比较牛吧，我只能这么安慰自己。就唯有白天和晚上上班，下班后加班到凌晨来做这个笔试题。花了两周时间，撰写了设计文档，使用C++17写完了这个需求，并附上完整的测试case，得到的反馈是还不错。面试要求和面试花样比别家多，待遇却不比别家高。但最后还是选择了微信支付的Offer, 毕竟这是微信，想去看下。
1. 我还以为GM面是走个过场，后来才知道有非常多的面试者GM 面被GM问得体无完肤，因为 GM 想要既会做的，又会说的。只说不做的假把式和只做不说的傻把式都不要。
1. 在公司层面，腾讯从2022年开始，就宣布了降本增效的大政方针，用通俗的话讲，就是裁员降薪。 从年初每天刷屏的毕业论文（被裁员同事写的感想）.在个人层面，2022年是厚积薄发的一年。我站在智哥的基础上，花了近4个月，把负债沉重的祖传签约链路给重构了，并梳理清楚了签约链路的业务规则，沉淀成文档。花了1年多的时间，从0搭建了代扣的数据仓库。花了1个多月时间，从0重新搭建了一套类似委托代扣签约的免密收银台签约链路。在腾讯KM平台输出了十多篇文章，有超过5篇入选/获得双月度的腾讯知识奖，1篇获得年度腾讯知识奖，影响力超过了99%的同事。一边是个人能力和认知的进，一边是公司待遇和前景的退，还有疫情的前途未卜，难免令人心生迷茫，不知前路在何方.
1. 好朋友4年T10的晋升速度，与我可能6年还停留在T8的差距; 深圳高企的房价以及我增长缓慢的收入。微信支付，在各种压力之下，变得越发地像一个工厂，而每个开发者，都只是流水线上的工人.
1. 我希望可以追上期望中的自己，每次想到，我这样的坚持可以让我摆脱这样生活，我的动力就涌出来了。所谓知人者智，自知者明，我只是个没有天赋，也没有资源的普通人，想要追上期望中的自己，坚持就是我最大的天赋。

###### 工作5步法
![](/_posts/Weekly_Learning/2024/2024-12-29-13th_SI/5steps_work.jpg)

### 有趣


### 荐书


### 杂谈


![](/img/wc-tail.GIF)
