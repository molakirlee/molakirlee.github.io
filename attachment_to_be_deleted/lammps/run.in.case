###############################################
# LAMMPS script
###############################################

#####################
# 1. Initialization #
#####################
# Box and units  (use LJ units and periodic boundaries)
units lj                 # use lennard-jones (i.e. dimensionless) units
atom_style full         # angle:atoms with bonds and angles; full:
boundary p p p           # p p p : all boundaries are periodic; p p f: x/y are periodic

######################
# 2. Atom definition #
######################
# READ "start" data file 
read_data initial_configuration.txt 

##############
# 3. Setting #
##############
# Neighbours list
neighbor 0.5 bin
neigh_modify every 1 delay 3 check yes one 10000

# Define groups 
group substrates type 1 
group bot_substr id <= 81
group top_substr subtract substrates bot_substr
group polymers type 2
group ctr_ions type 3
group salt substract all polymers ctr_ions
group dump_group subtract all top_substr

# Generate regular RESTART files to store state of simulation
#restart 50000 polymer.restart

# Reset timestep / set timestep of integrator
reset_timestep 0 
timestep 0.005

# Medium
dielectric 0.333 

########################################################
# 4. Start with Soft' potentials #
########################################################
# 4.1 Bond - Angle - Non-bond
## Bonds
bond_style   harmonic 
# For style harmonic, specify: bond type/ K (energy/distance^2) / R0 (distance)
bond_coeff   1   90.0   1.1 

## angles
angle_style  cosine
angle_coeff   1  20.0
# this choice gives a polymer with the same persistence length as DNA

## Non-bonded
pair_style     soft 1.12246152962189
#  pair_coeff for soft, specify 3: atom type interacting with / atom type / energy /  cutoff
pair_coeff * *  100.0 1.12246152962189 

# 4.2 Output
## Output thermodynamic info  (temperature, energy, pressure, etc.)
thermo 1000
thermo_style   custom   step  temp  epair  emol  press  vol
## Output thermodynamic info to file
variable t equal step
variable mytemp equal temp
variable myepair equal epair
fix mythermofile all print 1000 "$t ${mytemp} ${myepair}" file thermo_output.dat screen no
# Dump configurations
# every 1000 time steps, each atom's id, type, x,y,z coords and x,y,z image flages are output. image flags count how many times each atom has moved through a periodic boundary
dump dum1 all custom 1000 dump.DNA id type xs ys zs ix iy iz
## Set up a compute for R_g and write it to a file
compute myRG2compute all gyration
variable RG2 equal c_myRG2compute
fix myRG2file all print 1000 "$t ${RG2}" file radius_of_gyration_squared.dat screen no

# 4.3 Run
# run integration for a number of steps to equilibrate with soft potnentials
run 5000
write_restart polymer.equlilb.restart


########################################################
# 5. Now switch to - LJ potential and FENE bonds #
########################################################
# 5.1 Bonds - Angles - Pairs - LongRangeCOU
# Bonds
bond_style   fene
special_bonds fene #<=== I M P O R T A N T prevents LJ from being counted twice
# For style FENE, specify: bond type / K (energy/distance^2) /  R0 (distance) / epsilon / sigma
bond_coeff   1    30.0   1.5   1.0   1.0

# Angles
angle_style cosine/delta
angle_ceoff 1 1.0 180.0

# Non-bonded
pair_style      lj/cut/coul/long 2.5 2.5
pair_modify shift yes mix arithmetic       # option to ensure energy is calculated corectly
#  pair_coeff for LJ, specify 4: atom type interacting with / atom type / energy / mean diameter of the two atom types / cutoff
pair_coeff      1 1 1.0 1.0 1.12246152962189

# Long Range COU
kspace_style     pppm 0.001
# If the boundary is p p f
#kspace_modify slab 3.0

# 5.2 Output
## Output thermodynamic info  (temperature, energy, pressure, etc.)
thermo 1000
compute real_temp not_substr temp
thermo_style   custom   step  temp dt c_real_temp press vol etotal ke pe ebond eangle evdwl ecoul elong
## Output thermodynamic info to file
variable t equal step
variable mytemp equal temp
variable myepair equal epair
fix mythermofile all print 1000 "$t ${mytemp} ${myepair}" file thermo_output.dat screen no
## Set up a compute for R_g and write it to a file
compute myRG2compute all gyration
variable RG2 equal c_myRG2compute
fix myRG2file all print 1000 "$t ${RG2}" file radius_of_gyration_squared.dat screen no

# 5.3 Fix NVT and RUN
# Set up fixes
variable seed equal 54654651     # a seed for the thermostat
fix 1 all nve                             # NVE integrator
fix 2 all langevin   1.0 1.0 100.0 ${seed}  # langevin thermostat

# now do a longer run and  write a final restart file
run_style verlet
run 50000
write_restart final.restart

