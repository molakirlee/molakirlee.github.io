---
layout:     post
title:      "bat脚本问题"
subtitle:   "一些使用bat脚本过程中遇到的问题"
date:       2019-01-13 19:52:00
author:     "XiLock"
header-img: ""
header-mask: 0.3
catalog:    true
tags:
    - 《斤竹精舍·游艺集》
    - CS
    - 2019


---

### set在复合语句中的使用
###### 问题描述
在bat脚本中，set命令用来给变量赋值，然而set不能用在复合语句里面比如if 1==1 set a=2或者for %%i in (a) do set a=2。如果强行使用，则被赋值的变量可能为空。
###### 问题分析
批处理的过程是“自上而下，逐条处理”。“逐条”并不等同于“逐行”。这个“条”，是“一条完整的语句”的意思，并不是指“一行代码”。在批处理中，是不是一条完整的语句，并不是以行来论的，而是要看它的作用范围。什么样的语句才算“一条完整的语句”呢？
1. 在复合语句中，整个复合语句是一条完整的语句，而无论这个复合语句占用了多少行的位置。常见的复合语句有：for语句、if……else语句、用连接符&、||和&&连接的语句，用管道符号|连接的语句，以及用括号括起来的、由多条语句组合而成的语句块；
1. 在非复合语句中，如果该语句占据了一行的位置，则该行代码为一条完整的语句。 

在代码“逐条”执行的过程中，cmd.exe这个批处理解释器会对每条语句做一些预处理工作，这就是批处理中大名鼎鼎的“预处理机制”。

预处理的大致情形是这样的：首先，把一条完整的语句读入内存中（不管这条语句有多少行，它们都会被一起读入），然后，识别出哪些部分是命令关键字，哪些是开关、哪些是参数，哪些是变量引用……如果代码语法有误，则给出错误提示或退出批处理环境；如果顺利通过，接下来，就把该条语句中所有被引用的变量及变量两边的百分号对，用这条语句被读入内存之就已经赋予该变量的具体值来替换……当所有的预处理工作完成之后，批处理才会执行每条完整语句内部每个命令的原有功能。也就是说，如果命令语句中含有变量引用（变量及紧邻它左右的百分号对），并且某个变量的值在命令的执行过程中被改变了，即使该条语句内部的其他地方也用到了这个变量，也不会用最新的值去替换它们，因为某条语句在被预处理的时候，所有的变量引用都已经被替换成字符串常量了，变量值在复合语句内部被改变，不会影响到语句内部的其他任何地方。

以`set num=0 && echo %num%`为例。这是一条复合语句，它的含义是：把0赋予变量num，成功后，显示变量num的值。

虽然是在变量num被赋值成功后才显示变量num的值，但是，因为这是一条复合语句，在预处理的时候，&&后的%num%只能被set语句之前的语句赋予变量num的具体值来替换，而不能被复合语句内部、&&之前的set语句对num所赋予的值来替换，可见，此num非彼num。可是，在这条复合语句之前，我们并没有对变量num赋值，所以，&&之后的%num%是空值，相当于在&&之后只执行了 echo 这一命令，所以，会显示 echo 命令的当前状态，而不是显示变量num的值（虽然该变量的值被set语句改变了）。

###### 解决办法
使用变量延迟扩展语句，让变量的扩展行为延迟一下，从而获取我们想要的值。

在这里，我们先来充下电，看看“变量扩展”又是怎么一回事。

用CN-DOS里批处理达人willsort的原话，那就是：“在许多可见的官方文档中，均将使用一对百分号闭合环境变量以完成对其值的替换行为称之为“扩展（expansion）”，这其实是一个第一方的概念，是从命令解释器的角度进行称谓的，而从我们使用者的角度来看，则可以将它看作是引用（Reference）、调用（Call）或者获取（Get）。”说得直白一点，所谓的“变量扩展”，实际上就是很简单的这么一件事情：用具体的值去替换被引用的变量及紧贴在它左右的那对百分号。

既然只要延迟变量的扩展行为，就可以获得我们想要的结果，那么，具体的做法又是怎样的呢？一般说来，延迟变量的扩展行为，可以有如下选择：

1. 在适当位置使用`setlocal enabledelayedexpansion`语句； 　　
1. 在适当的位置使用 call 语句。
若使用`setlocal enabledelayedexpansion`：
```
@echo off
set num=0
setlocal enabledelayedexpansion
for /f %%i in ('dir /a-d /b *.exe') do (
    set /a num+=1
    echo num 当前的值是 !num!
)
echo 当前目录下共有 %num% 个exe文件
dir /a-d /b *.txt|findstr "test">nul&&(
    echo 存在含有 test 字符串的文本本件
)||echo 不存在含有 test 字符串的文本文件
if exist test.ini (
    echo 存在 test.ini 文件
) else echo 不存在 test.ini 文件
pause>nul
```
若使用call语句：
```
@echo off
set num=0
for /f %%i in ('dir /a-d /b *.exe') do (
    set /a num+=1
    call echo num 当前的值是 %%num%%
)
echo 当前目录下共有 %num% 个exe文件
dir /a-d /b *.txt|findstr "test">nul&&(
    echo 存在含有 test 字符串的文本本件
)||echo 不存在含有 test 字符串的文本文件
if exist test.ini (
    echo 存在 test.ini 文件
) else 不存在 test.ini 文件
pause>nul
```

由此可见，如果使用`setlocal enabledelayedexpansion`语句来延迟变量，就要把原本使用百分号对闭合的变量引用改为使用感叹号对来闭合；如果使用call语句，就要在原来命令的前部加上`call`命令，并把变量引用的单层百分号对改为双层。其中，因为call语句使用的是双层百分号对，容易使人犯迷糊，所以用得较少，常用的是使用`setlocal enabledelayedexpansion`语句（set是设置的意思，local是本地的意思，enable是能够的意思，delayed是延迟的意思，expansion是扩展的意思，合起来，就是：让变量成为局部变量，并延迟它的扩展行为）。

通过上面的分析，我们可以知道：
1. 为什么要使用变量延迟？因为要让复合语句内部的变量实时感知到变量值的变化。 　　
1. 在哪些场合需要使用变量延迟语句？在复合语句内部，如果某个变量的值发生了改变，并且改变后的值需要在复合语句内部的其他地方被用到，那么，就需要使用变量延迟语句。而复合语句有：for语句、if……else语句、用连接符&、||和&&连接的语句、用管道符号|连接的语句，以及用括号括起来的、由多条语句组合而成的语句块。最常见的场合，则是for语句和if……else语句。 　　
3. 怎样使用变量延迟？方法有两种：
- 使用 setlocal enabledelayedexpansion 语句：在获取变化的变量值语句之前使用setlocal enabledelayedexpansion，并把原本使用百分号对闭合的变量引用改为使用感叹号对来闭合； 　　
- 使用 call 语句：在原来命令的前部加上 call 命令，并把变量引用的单层百分号对改为双层。

“变量延迟”是批处理中一个十分重要的机制，它因预处理机制而生，用于复合语句，特别是大量使用于强大的for语句中。

参考：[批处理命令——for](https://www.cnblogs.com/Braveliu/p/5081087.html)
![](/img/wc-tail.GIF)